package cz.johnslovakia.skywars.listeners;

import com.cryptomorin.xseries.XMaterial;
import cz.johnslovakia.gameapi.GameAPI;
import cz.johnslovakia.gameapi.game.GameState;
import cz.johnslovakia.gameapi.enums.Sounds;
import cz.johnslovakia.gameapi.game.Game;
import cz.johnslovakia.gameapi.users.GamePlayer;
import cz.johnslovakia.gameapi.game.GameTeam;
import cz.johnslovakia.gameapi.gameCosmetics.CosmeticsCategory;
import cz.johnslovakia.gameapi.managers.GameManager;
import cz.johnslovakia.gameapi.users.PlayerManager;
import cz.johnslovakia.skywars.SkyWars;
import cz.johnslovakia.skywars.events.FireballLaunchEvent;
import cz.johnslovakia.skywars.utils.DataHandler;
import cz.johnslovakia.skywars.utils.Util;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Fireball;
import org.bukkit.entity.Player;
import org.bukkit.entity.TNTPrimed;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.entity.ExplosionPrimeEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.metadata.MetadataValue;
import org.bukkit.util.Vector;

public class TNTListener implements Listener {

    @EventHandler
    public void onExplosionPrime(ExplosionPrimeEvent e) {
        if (e.getEntity() instanceof TNTPrimed) {
            e.setRadius(3.25F);
        }
    }

    @EventHandler
    public void onBlockExplode(EntityExplodeEvent e) {
        if (e.getEntity() instanceof TNTPrimed) {
            e.setCancelled(true);

            if (e.getEntity().hasMetadata("Effect")){
                return;
            }
            if (!e.getEntity().hasMetadata("Game")){
                return;
            }

            Game game = (Game) ((MetadataValue) e.getEntity().getMetadata("Game").get(0)).value();
            if (game.getState() != GameState.INGAME){
                e.setCancelled(true);
                return;
            }

            /*for (Block block : e.blockList()) {
                block.setType(Material.AIR);

                if (block.getType() == Material.IRON_INGOT){
                    block.getLocation().getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.IRON_INGOT));
                }else if (block.getType() == Material.DIAMOND){
                    block.getLocation().getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.DIAMOND));
                }else if (block.getType() == Material.GRAVEL){
                    block.getLocation().getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.ARROW, 2));
                }
            }*/

            Location location = DataHandler.getMapsConfig().getLocation("maps." + game.getPlayingArena().getID() + ".throwableTNT");
            if (location != null) {
                for (Block block : e.blockList()) {
                    if (Util.isInRadius(block.getLocation(), location, 3)) {
                        e.setCancelled(true);
                    }else{
                        e.setCancelled(true);
                        block.setType(Material.AIR);

                        if (block.getType() == Material.IRON_INGOT){
                            block.getLocation().getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.IRON_INGOT));
                        }else if (block.getType() == Material.DIAMOND){
                            block.getLocation().getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.DIAMOND));
                        }else if (block.getType() == Material.GRAVEL){
                            block.getLocation().getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.ARROW, 2));
                        }
                    }
                }

                /*double radius = 3D;
                for (Block block : e.blockList()){
                    if (location.distanceSquared(block.getLocation()) <= radius * radius) {
                        e.setCancelled(true);
                    }else{
                        e.setCancelled(true);
                        block.setType(Material.AIR);

                        if (block.getType() == Material.IRON_INGOT){
                            block.getLocation().getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.IRON_INGOT));
                        }else if (block.getType() == Material.DIAMOND){
                            block.getLocation().getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.DIAMOND));
                        }else if (block.getType() == Material.GRAVEL){
                            block.getLocation().getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.ARROW, 2));
                        }
                    }
                }*/
            }
        }if (e.getEntity() instanceof Fireball){
            e.setCancelled(true);
            for (Block block : e.blockList()) {
                block.setType(Material.AIR);
            }
            e.getLocation().getWorld().playSound(e.getLocation(), Sounds.EXPLODE.bukkitSound(), 20.0F, 20.0F);
        }
    }

    @EventHandler
    public void onBlockPlace(BlockPlaceEvent e) {
        if (e.getBlock().getType().equals(Material.TNT)){
            TNTPrimed tnt = (TNTPrimed) e.getBlock().getWorld().spawn(e.getBlock().getLocation(), TNTPrimed.class);
            tnt.setFuseTicks(50);
            tnt.setMetadata("Game", (MetadataValue)new FixedMetadataValue(SkyWars.getInstance(), PlayerManager.getGamePlayer(e.getPlayer()).getGame()));
            e.getBlock().setType(Material.AIR);
        }
    }

    @EventHandler
    public void onTNTDamagePlayer(EntityDamageByEntityEvent e) {
        if(e.getEntity() instanceof Player &&
                e.getDamager() instanceof Fireball) {
            e.setCancelled(true);

            Player player = (Player) e.getEntity();

            if (e.getEntity().equals(((Fireball) e.getDamager()).getShooter())) {
                SkyWars.getInstance().getVersionSupport().damagePlayer(player, 3);
                Vector velocity = player.getVelocity().add(new Vector(0, 0.8, 0));
                player.setVelocity(velocity);
            }else{
                SkyWars.getInstance().getVersionSupport().damagePlayer(player, 5);
            }
        }
    }

    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent e) {
        Player player = e.getPlayer();
        GamePlayer gp = PlayerManager.getGamePlayer(player);
        ItemStack eItem = e.getItem();

        if (gp.getGame() == null){
            return;
        }

        if (gp.getGame().getState() != GameState.INGAME) {
            return;
        }

        if (eItem != null) {
            if (eItem.getType().equals(XMaterial.FIRE_CHARGE.parseMaterial())) {
                Location eye = player.getEyeLocation();
                Location loc = eye.add(eye.getDirection().multiply(1.2));

                Fireball fireball = (Fireball) loc.getWorld().spawnEntity(loc, EntityType.FIREBALL);
                fireball.setVelocity(loc.getDirection().normalize().multiply(2));
                fireball.setShooter(player);

                //fireball.setYield(1.0F);
                //fireball.setMetadata("Owner", (MetadataValue) new FixedMetadataValue(MicroBattle.getInstance(), player.getName()));

                CosmeticsCategory category = GameAPI.getCosmeticsManager().getCategoryByName("Projectile Trails");
                if (GameAPI.getCosmeticsManager().getSelectedCosmetic(category, player) != null) {
                    Util.trail(GameAPI.getCosmeticsManager().getSelectedCosmetic(category, player).getName(), fireball);
                }


                FireballLaunchEvent ev = new FireballLaunchEvent(player, fireball);
                Bukkit.getPluginManager().callEvent(ev);


                int i = eItem.getAmount();
                if (i > 1) {
                    eItem.setAmount(i - 1);
                    e.setCancelled(true);
                    return;
                }

                SkyWars.getInstance().getVersionSupport().setItemInMainHand(player, null);
                e.setCancelled(true);
            }
        }
    }
}
